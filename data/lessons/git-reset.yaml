title: "Git Reset"
description: "Learn how to undo changes in Git using different reset modes. This lesson covers soft, mixed, and hard resets with practical examples."
category: "changes"
level: "intermediate"
time: "15 minutes"
order: 5
steps:
  - id: 1
    title: "Make some changes"
    description: "Let's start by making some changes to a README.md file"
    allowedCommands:
      - cmd: "echo '# My Project' > README.md"
        valid: "^echo\\s+'.*'\\s+>\\s+README\\.md$"
        output: []
        hint: "We're creating a README.md file with some content to work with"
        next: 2

  - id: 2
    title: "Stage the changes"
    description: "Add the changes to the staging area"
    allowedCommands:
      - cmd: "git add README.md"
        valid: "^git\\s+add\\s+README\\.md$"
        output: []
        hint: ""
        next: 3

  - id: 3
    title: "Commit the changes"
    description: "Create a commit with the staged changes"
    allowedCommands:
      - cmd: "git commit -m \"Add README.md\""
        valid: "^git\\s+commit\\s+-m\\s*['\"][a-z -_]+['\"]$"
        output:
          - text: |
              [main a1b2c3d] Add README.md
               1 file changed, 3 insertions(+)
               create mode 100644 README.md
            hint: ""
        hint: ""
        next: 4

  - id: 4
    title: "Reset --soft"
    description: "Use git reset --soft to undo the commit but keep changes staged"
    allowedCommands:
      - cmd: "git reset --soft HEAD~1"
        valid: "^git\\s+reset\\s+--soft\\s+HEAD~1$"
        output: []
        hint: |
          Here we use <code>HEAD~1</code> to reset to the previous commit.
          You can use <code>HEAD~{AMOUNT}</code> to reset your <em>repository</em> <code>{AMOUNT}</code> commits back in time.
        next: 5
      - cmd: "git reset --soft HEAD^"
        valid: "^git\\s+reset\\s+--soft\\s+HEAD\\^$"
        output: []
        hint: |
          Here we use <code>HEAD^</code> to reset to the previous commit.
          You can use <code>HEAD[^*]</code> to reset your <em>repository</em> <strong>*</strong> commits back in time (<code>HEAD^^^</code> - 3 commits).
        next: 5

  - id: 5
    title: "Check status"
    description: "See what happened after the soft reset"
    allowedCommands:
      - cmd: "git status"
        valid: "^git\\s+status$"
        output:
          - text: |
              On branch main
              
              Changes to be committed:
                (use "git restore --staged <file>..." to unstage)               
              	      new file:   README.md
            hint: |
              Notice that README.md is still <b>staged</b> even though we undid the commit.
              With <code>reset --soft</code> we undo the commit,
              but do not change the working directory AND the changes get added to the index so
              we can immediately commit the changes again.
        hint: ""
        next: 6

  - id: 6
    title: "Commit again"
    description: "Commit the still-staged changes"
    allowedCommands:
      - cmd: "git commit -m \"Add README.md again\""
        valid: "^git\\s+commit\\s+-m\\s*['\"][a-z -_]+['\"]$"
        output:
          - text: |
              [main b2c3d4e] Add README.md again
               1 file changed, 3 insertions(+)
               create mode 100644 README.md"
            hint: "New commit created with a different hash.<br>(old: a1b2c3d, new: b2c3d4e)"
        hint: "Since the changes were still staged, we can just commit them again"
        next: 7

  - id: 7
    title: "Reset (mixed)"
    description: "Use git reset without flags (mixed reset) to undo commit and unstage changes"
    allowedCommands:
      - cmd: "git reset HEAD~1"
        valid: "^git\\s+reset\\s+HEAD[~1]|[\\^]$"
        output: []
        hint: |
          Mixed <code>reset</code> is the default mode and undoes the commit and keeps them in your working directory, but does <strong>not</strong> <em>stage</em> them again.<br>
          <h6>üí° Hint:</h6>
          Use either <code>HEAD~1</code> or <code>HEAD^</code> to reset to the previous commit.
        next: 8

  - id: 8
    title: "Check status"
    description: "See the difference after mixed reset"
    allowedCommands:
      - cmd: "git status"
        valid: "^git\\s+status$"
        output:
          - text: |
              On branch main
              
              Untracked files:
                (use "git add <file>..." to include in what will be committed)              
              	      README.md
            hint: |
              Now README.md is <em>untracked</em> - With <code>reset</code> (mixed) we undo the commit,
              do not change the <em>working directory</em> <strong>but</strong> the changes are <strong>not</strong> added to the <em>index</em>.
        hint: ""
        next: 9

  - id: 9
    title: "Add more changes"
    description: "Let's add more content to the README.md file"
    allowedCommands:
      - cmd: "echo '## Features' >> README.md"
        valid: "^echo\\s+['\"].*['\"]\\s*>>\\s*README\\.md$"
        output: []
        hint: "We're appending more content to the README.md file"
        next: 10

  - id: 10
    title: "Stage the changes"
    description: "Add the modified README.md to the staging area"
    allowedCommands:
      - cmd: "git add README.md"
        valid: "^git\\s+add\\s+README\\.md$"
        output: []
        hint: "Staging the updated README.md file"
        next: 11

  - id: 11
    title: "Commit the updated file"
    description: "Commit the changes with the new content"
    allowedCommands:
      - cmd: "git commit -m \"Add README with features\""
        valid: "^git\\s+commit\\s+-m\\s*['\"][a-z -_]+['\"]$"
        output:
          - text: |
              [main c3d4e5f] Add README with features
               1 file changed, 4 insertions(+)
               create mode 100644 README.md"
            hint: "New commit created with the updated content"
        hint: "This creates a commit with our enhanced README.md"
        next: 12

  - id: 12
    title: "Reset --hard"
    description: "Use git reset --hard to completely remove the commit and all changes"
    allowedCommands:
      - cmd: "git reset --hard HEAD~1"
        valid: "^git\\s+reset\\s+--hard\\s+HEAD[~1]|[\\^]$"
        output:
          - text: "HEAD is now at d6a35b2 Previous commit"
            hint: |
              The hard reset moved <em>HEAD</em> back to the previous commit and <b>completely removed</b> all changes.
              This is useful if you made some experimental changes and want to go back to a clean state.
              You can do this with <code>git reset --hard</code>. If you don't provide a commit hash, it will assume <em>HEAD</em>, your last commit.
              <br>
              <h5>‚ö†Ô∏è Warning:</h5>
              Be aware that <code>--hard</code> undoes the <em>commit</em>, does not add the changes to the <em>index</em>
              <strong>AND</strong> removes all changes from your <em>working directory</em>.<br>
              You can potentially lose data!
        hint: "<code>--hard</code> is the most destructive reset - it undoes the commit <strong>AND</strong> removes all changes from your working directory."
        next: 13

  - id: 13
    title: "Check what happened"
    description: "See the result of the hard reset"
    allowedCommands:
      - cmd: "git status"
        valid: "^git\\s+status$"
        output:
          - text: |
              On branch main
              nothing to commit, working tree clean
            hint: "The working tree is clean - no changes, no staged files, all your changes before the hard reset are gone!"
        hint: "Hard reset completely removed all changes"
        next: 14

  - id: 14
    title: "Check if README.md still exists"
    description: "Let's see if our file is still there"
    allowedCommands:
      - cmd: "ls -la README.md"
        valid: "^ls\\s+-la\\s+README\\.md$"
        output:
          - text: "ls: README.md: No such file or directory"
            hint: "The file is gone! <b>--hard</b> reset completely removed all changes from your working directory"
        hint: "Hard reset removed the file completely - changes are gone! üò±"
        next: 15

  - id: 15
    title: "Summary"
    description: "You've learned the three types of git reset"
    allowedCommands:
      - cmd: "git log --oneline"
        valid: "^git\\s+log\\s+--oneline$"
        output:
          - text: "d6a35b2 (HEAD -> main) Previous commit\n..."
            hint: |
              <h4>Git Reset Summary:</h4>
              <ul>
                <li><b>--soft</b>: Undoes commit, keeps working directory and re-stage changes</li>
                <li><b>--mixed</b> (default): Undoes commit, keeps working directory but does not stage changes</li>
                <li><b>--hard</b>: Undoes commit AND removes all changes completely</li>
              </ul>
              <p><b>Warning:</b> <code>--hard</code> is destructive and cannot be undone easily!</p>
        hint: "Check if all the <em>commits</em> are gone again."
